name: Docker Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write  # 允许创建 Release
  packages: write  # 允许推送到 GitHub Packages (可选)

jobs:
  build-linux-and-docker:
    runs-on: ubuntu-latest
    outputs:
      linux_x86_64_binary: ${{ steps.prepare_linux_assets.outputs.linux_x86_64_binary }}
      linux_x86_64_checksum: ${{ steps.prepare_linux_assets.outputs.linux_x86_64_checksum }}
      linux_arm64_binary: ${{ steps.prepare_linux_assets.outputs.linux_arm64_binary }}
      linux_arm64_checksum: ${{ steps.prepare_linux_assets.outputs.linux_arm64_checksum }}
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 安装交叉编译工具链
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: 设置交叉编译环境变量
        run: |
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc" >> $GITHUB_ENV

      - name: Rust Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: 设置 Rust 工具链和目标 (Linux)
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: |
            x86_64-unknown-linux-gnu
            aarch64-unknown-linux-gnu

      - name: 编译 Rust 二进制文件 (Linux)
        run: |
          cargo build --bin berry-api --release --target x86_64-unknown-linux-gnu
          cargo build --bin berry-api --release --target aarch64-unknown-linux-gnu

          # 创建 Docker 构建上下文目录
          mkdir -p docker_build_context/target/amd64/release
          mkdir -p docker_build_context/target/arm64/release

          # 复制 Dockerfile 到构建上下文
          cp Dockerfile.prebuilt docker_build_context/

          # 复制二进制文件到 Docker 构建上下文期望的路径
          cp target/x86_64-unknown-linux-gnu/release/berry-api docker_build_context/target/amd64/release/berry-api
          cp target/aarch64-unknown-linux-gnu/release/berry-api docker_build_context/target/arm64/release/berry-api

          ls -la docker_build_context/target/amd64/release/
          ls -la docker_build_context/target/arm64/release/

      - name: 准备 Linux Release 文件
        id: prepare_linux_assets
        run: |
          mkdir -p ./release-assets

          # x86_64
          cp target/x86_64-unknown-linux-gnu/release/berry-api ./release-assets/berry-api-linux-x86_64
          sha256sum ./release-assets/berry-api-linux-x86_64 > ./release-assets/berry-api-linux-x86_64.sha256
          echo "linux_x86_64_binary=release-assets/berry-api-linux-x86_64" >> "$GITHUB_OUTPUT"
          echo "linux_x86_64_checksum=release-assets/berry-api-linux-x86_64.sha256" >> "$GITHUB_OUTPUT"

          # arm64
          cp target/aarch64-unknown-linux-gnu/release/berry-api ./release-assets/berry-api-linux-arm64
          sha256sum ./release-assets/berry-api-linux-arm64 > ./release-assets/berry-api-linux-arm64.sha256
          echo "linux_arm64_binary=release-assets/berry-api-linux-arm64" >> "$GITHUB_OUTPUT"
          echo "linux_arm64_checksum=release-assets/berry-api-linux-arm64.sha256" >> "$GITHUB_OUTPUT"

          ls -la ./release-assets

      - name: 上传 Linux Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-binaries
          path: ./release-assets/berry-api-linux-*

      - name: 设置 Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 登录到 Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 构建并推送 Docker 镜像
        uses: docker/build-push-action@v5
        with:
          context: ./docker_build_context
          file: ./docker_build_context/Dockerfile.prebuilt
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ppkun00/berry-api:${{ github.ref_name }}
            ppkun00/berry-api:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-macos:
    runs-on: macos-latest
    outputs:
      darwin_arm64_binary: ${{ steps.prepare_macos_assets.outputs.darwin_arm64_binary }}
      darwin_arm64_checksum: ${{ steps.prepare_macos_assets.outputs.darwin_arm64_checksum }}
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: Rust Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: 设置 Rust 工具链和目标 (macOS)
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: aarch64-apple-darwin

      - name: 编译 Rust 二进制文件 (macOS)
        run: |
          cargo build --bin berry-api --release --target aarch64-apple-darwin
          ls -la target/aarch64-apple-darwin/release/

      - name: 准备 macOS Release 文件
        id: prepare_macos_assets
        run: |
          mkdir -p ./release-assets

          # arm64
          cp target/aarch64-apple-darwin/release/berry-api ./release-assets/berry-api-darwin-arm64
          shasum -a 256 ./release-assets/berry-api-darwin-arm64 > ./release-assets/berry-api-darwin-arm64.sha256
          echo "darwin_arm64_binary=release-assets/berry-api-darwin-arm64" >> "$GITHUB_OUTPUT"
          echo "darwin_arm64_checksum=release-assets/berry-api-darwin-arm64.sha256" >> "$GITHUB_OUTPUT"

          ls -la ./release-assets

      - name: 上传 macOS Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-binaries
          path: ./release-assets/berry-api-darwin-*

  create-github-release:
    runs-on: ubuntu-latest
    needs: [build-linux-and-docker, build-macos]
    steps:
      - name: 下载 Linux Artifacts
        uses: actions/download-artifact@v4
        with:
          name: linux-binaries
          path: release-assets

      - name: 下载 macOS Artifacts
        uses: actions/download-artifact@v4
        with:
          name: macos-binaries
          path: release-assets

      - name: 显示下载的文件
        run: ls -la release-assets

      - name: 创建 GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            release-assets/berry-api-linux-x86_64
            release-assets/berry-api-linux-x86_64.sha256
            release-assets/berry-api-linux-arm64
            release-assets/berry-api-linux-arm64.sha256
            release-assets/berry-api-darwin-arm64
            release-assets/berry-api-darwin-arm64.sha256
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
